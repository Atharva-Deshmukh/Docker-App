INSIDE DOCKERFILE
--> To run the app, [node index.js]
--> docker can be run in any terminal since it is globally installed

DOCKER COMMANDS
--> To pull an image [docker pull <imageName>]
--> To run an image as a container [docker run -it --name <name of container u want> <image name> /bin/bash]
    it => interactive
    /bin/bash means after container is created, run a bash inside it
--> to run image as container along with port specification:
    docker run --name <name_of_container_u_want> -p <port_u_choose>:<port_of_app> <image_u_are_running>

--> to delete everything inside the local system => docker system prune -a
    This will remove:
  - all stopped containers
  - all networks not used by at least one container
  - all images without at least one container associated to them
  - all build cache


PROCESS TO WRITE THE dockerfile:
--> install the microsoft docker extension. this will enable intellisense for the code inside dockerfile
--> follow the commands in exact order as executed when creating this application
--> like first we installed the latest node image
--> dockerfile creates the image of this project
--> copy the code inside the docker image 
    command => COPY source_path dest_path
    . represents current directory, jaise yaha pe jaha dockerfile present hai (jis directory me), image me code usi directory ka copy hoga, means image ke andar jo code store hua vo image me root me store hoga
    . in destination means jo source se code uthaaya hai, vo image me bhi usi path pe rakho (in root directory of image)
    if the dest_path = ./some_folder, then the code in the root directory of the simpleApp will be stored in some_folder inside the image file
--> after creating the image and copying the source code, install all dependencies
    RUN npm install  (installs all dependencies from package.json)
--> now, application ko run honey ke liye ek port do, it must be same as that given in the source code (5500 in app)
    (Define the network ports that this container will listen on at runtime)
--> now give the command u use to run the project inside CMD, its in array format
    our command => node index.js

--> [[EXTRA]]  if apnaa code apney ko lets say kisi aur directory me karna hota (say /app), to sabhi commands ko /app me chalaana padtaa
    rather modifying individual commands, we first set the work directory to /app using WORKDIR command

--> ab dockerfile ready hai, uska build bnao using this cmd in vs code terminal: docker build -t <name_for_image> .
    t => tag (the name u want to give)
    . => root me bnaegi image, if u want to make image in some other folder, give ../folder_path
    

    [[NOTE]] run this command in that directory where there is dockerfile, better to run in vs code terminal
    [[NOTE]] image will be visible in docker desktop, not in the VS code

--> to list all images inside docker, run this in terminal (cmd), docker images

--> Run the image on port 5500, which is also the app port and type localhost 5500 on browser, u will see tha app running there

--> [[SCENARIO]] no port is given by default while running the container, the app runs in docker but you cannot access it on the browser
    hence we write EXPOSE <port_number> to be able to run this app on the browser as well

--> [[SCENARIO]] write 0 in the port number to generate any random port number so that if another container is running on say 5500, the randomly generated
    port number will be something else

DOCKERIGNORE FILE
--> it has the files which we don't want to include inside the docker image
--> make a file .dockerignore and ignore the notes.txt file and node_modules (since they are bulky)
--> since we already have npm install command in dockerfile to install the needed dependencies on the globally
--> to ignore all the text files in a single command, use .txt in 


IMAGE DELETION:
--> there are two ways: delete icon in docker desktop and via command line
--> but if the image is being used by any container (the container may be running or may not be running)
    then u can't directly delete that image using delete icon
--> to delete that image, u first need to delete the container/s using it.
--> to delete unused image using terminal => docker image rm <image_name>
--> to delete used image using terminal => docker image rm <image_name> -f

--> to list all containers => docker ps -a
    ps means processors
--> to delete a non-running container via terminal => docker container rm <container_name>
--> to delete a running container via terminal => docker container rm <container_name> -f
--> to delete a running container via desktop => pause the container and then delete using icon


IMAGE VERSIONING:
--> whenever introducing changes inside the dockerimage, u need to create a new image
--> either keep a completely different name to that updated image or use version 
--> Versioning is more feasible over here since its easy to track and comprehend
--> delete everything inside the docker desktop first and create a new image

--> if we don't create any version, we get tag = latest
--> to create new version of image => docker build -t <image_name>:v<version_no> .
--> we get tag = v<version_no>